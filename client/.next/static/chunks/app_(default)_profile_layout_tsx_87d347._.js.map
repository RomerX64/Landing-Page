{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/tomir/OneDrive/Desktop/AssetlyLandingPage/client/app/%28default%29/profile/layout.tsx"],"sourcesContent":["\"use client\";\nimport React, {\n  useState,\n  ReactNode,\n  useContext,\n  useEffect,\n  createContext,\n  useMemo,\n} from \"react\";\nimport { initMercadoPago } from \"@mercadopago/sdk-react\";\nimport api from \"@/app/api/Api\";\nimport { handleAsync } from \"@/utils/error.helper\";\nimport { IPlan } from \"@/interfaces/Plan.interface\";\nimport {\n  ISubscripcion,\n  SubscriptionStatus,\n} from \"@/interfaces/Subscripcion.interface\";\nimport UserContext from \"@/context/user.context\";\n\ninterface SuscribeContextProps {\n  sub: ISubscripcion | null;\n  planes: IPlan[];\n  viewPlan: IPlan | null;\n  suscribirse: (\n    planId: number,\n    paymentMethodToken: string,\n    email: string\n  ) => Promise<void>;\n  desuscribirse: () => Promise<void>;\n  selectPlan: (planId: number) => Promise<IPlan | null>;\n  changePlan: (direction: \"next\" | \"prev\") => void;\n  fetchSub: () => Promise<ISubscripcion | null>;\n  fetchPlan: (subscription?: ISubscripcion) => Promise<any>;\n}\n\nconst defaultContext: SuscribeContextProps = {\n  sub: null,\n  planes: [],\n  viewPlan: null,\n  suscribirse: async () => {},\n  desuscribirse: async () => {},\n  selectPlan: async () => null,\n  changePlan: () => {},\n  fetchSub: async () => null,\n  fetchPlan: async () => null,\n};\n\nexport const SuscribeContext =\n  createContext<SuscribeContextProps>(defaultContext);\n\ninterface SuscribeProviderProps {\n  children: ReactNode;\n}\n\nexport const SuscribeProvider = ({ children }: SuscribeProviderProps) => {\n  const { user } = useContext(UserContext);\n  const [sub, setSub] = useState<ISubscripcion | null>(null);\n  const [planes, setPlanes] = useState<IPlan[]>([]);\n  const [viewPlan, setViewPlan] = useState<IPlan | null>(null);\n\n  // Inicializar MercadoPago solo una vez\n  useEffect(() => {\n    const token = process.env.NEXT_PUBLIC_APP_MP_TOKEN;\n    initMercadoPago(token || \"\");\n  }, []);\n\n  // Función para obtener planes\n  const getPlanes = async () => {\n    try {\n      const { data, error } = await handleAsync(api.get(`/users/planes`));\n      if (error || !data?.data) {\n        console.error(\n          \"Error al obtener planes:\",\n          error || \"No se retornaron datos\"\n        );\n        return;\n      }\n      const fetchedPlanes: IPlan[] = data.data;\n      setPlanes(fetchedPlanes);\n      localStorage.setItem(\"planes\", JSON.stringify(fetchedPlanes));\n      console.log(\"Planes actualizados desde la API\");\n    } catch (err) {\n      console.error(\"Error en getPlanes:\", err);\n    }\n  };\n\n  const suscribirse = async (\n    planId: number,\n    paymentMethodToken: string,\n    email: string\n  ) => {\n    try {\n      const { data, error } = await handleAsync(\n        api.post(`/subscriptions`, {\n          planId,\n          userEmail: email,\n          paymentMethodToken,\n        })\n      );\n\n      if (error || !data?.data?.subscription) {\n        console.error(\n          \"Error al suscribirse:\",\n          error || \"No se retornaron datos\"\n        );\n        return;\n      }\n\n      const newSubscription: ISubscripcion = data.data.subscription;\n      setSub(newSubscription);\n      localStorage.setItem(\"subscripcion\", JSON.stringify(newSubscription));\n    } catch (err) {\n      console.error(\"Excepción en suscribirse:\", err);\n    }\n  };\n\n  const desuscribirse = async () => {\n    if (!sub) return;\n    try {\n      const { data, error } = await handleAsync(\n        api.post(`/subscriptions/cancel`, {\n          subscriptionId: sub.mercadopagoSubscriptionId,\n          cancellationReason: \"Cancelación solicitada por el usuario\",\n        })\n      );\n\n      if (error || !data?.data?.subscription) {\n        console.error(\n          \"Error al desuscribirse:\",\n          error || \"No se retornaron datos\"\n        );\n        return;\n      }\n      setSub(null);\n      localStorage.removeItem(\"subscripcion\");\n    } catch (err) {\n      console.error(\"Excepción en desuscribirse:\", err);\n    }\n  };\n\n  const selectPlan = async (planId: number): Promise<IPlan | null> => {\n    if (planes.length === 0) {\n      await getPlanes();\n    }\n    const foundPlan = planes.find((plan) => plan.id === planId);\n    if (!foundPlan) {\n      console.error(\"Plan no encontrado\");\n      return null;\n    }\n    setViewPlan(foundPlan);\n    localStorage.setItem(\"viewPlan\", JSON.stringify(foundPlan));\n    return foundPlan;\n  };\n\n  const changePlan = (direction: \"next\" | \"prev\") => {\n    if (!viewPlan || planes.length === 0) return;\n    const currentIndex = planes.findIndex((plan) => plan.id === viewPlan.id);\n    if (currentIndex === -1) return;\n    let newIndex = direction === \"next\" ? currentIndex + 1 : currentIndex - 1;\n    if (newIndex < 0) newIndex = planes.length - 1;\n    if (newIndex >= planes.length) newIndex = 0;\n    const newPlan = planes[newIndex];\n    setViewPlan(newPlan);\n    localStorage.setItem(\"viewPlan\", JSON.stringify(newPlan));\n  };\n\n  // Cargar suscripción almacenada al cambiar el usuario\n  useEffect(() => {\n    const storedSub = localStorage.getItem(\"subscripcion\");\n    if (storedSub) {\n      setSub(JSON.parse(storedSub));\n    }\n  }, [user]);\n\n  // Cargar planes al montar el componente\n  useEffect(() => {\n    getPlanes();\n  }, []);\n\n  // Seleccionar el plan de vista si aún no está seleccionado\n  useEffect(() => {\n    if (planes.length > 0 && !viewPlan) {\n      const storedViewPlan = localStorage.getItem(\"viewPlan\");\n      if (storedViewPlan) {\n        setViewPlan(JSON.parse(storedViewPlan));\n      } else {\n        const popularPlan = planes.find((plan) => plan.popular === true);\n        setViewPlan(popularPlan || planes[0]);\n      }\n    }\n  }, [planes, viewPlan]);\n\n  // Modificación de fetchSub: ahora siempre consulta la API y actualiza el estado\n  const fetchSub = async (): Promise<ISubscripcion | null> => {\n    if (!user) return null;\n\n    const { data, error } = await handleAsync(api.get(`/users/sub/${user.id}`));\n\n    if (error || !data?.data) {\n      console.error(\n        \"Error al obtener suscripción:\",\n        error || \"No se retornaron datos\"\n      );\n      return null;\n    }\n\n    const newSub: ISubscripcion = data.data;\n    setSub(newSub);\n    localStorage.setItem(\"subscripcion\", JSON.stringify(newSub));\n\n    // Se actualiza el plan utilizando la suscripción recién obtenida\n    fetchPlan(newSub);\n\n    return newSub;\n  };\n\n  // Se modifica fetchPlan para recibir opcionalmente la suscripción a usar\n  const fetchPlan = async (subscription?: ISubscripcion) => {\n    const currentSub = subscription || sub;\n    if (!currentSub || !currentSub.plan) {\n      console.error(\"No hay suscripción activa para obtener el plan.\");\n      return null;\n    }\n    const { data, error } = await handleAsync(\n      api.get(`/users/plan/${currentSub.plan.id}`)\n    );\n    console.log(\"Respuesta de la API del plan:\", data);\n    if (error || !data?.data) {\n      console.error(\n        \"Error al obtener el plan:\",\n        error || \"No se retornaron datos\"\n      );\n      return null;\n    }\n    return data.data;\n  };\n\n  // Consultar la suscripción cuando el usuario esté disponible\n  useEffect(() => {\n    if (!user) return;\n    fetchSub();\n  }, [user]);\n\n  const value = useMemo(\n    () => ({\n      sub,\n      planes,\n      viewPlan,\n      suscribirse,\n      desuscribirse,\n      selectPlan,\n      changePlan,\n      fetchSub,\n      fetchPlan,\n    }),\n    [sub, planes, viewPlan, user]\n  );\n\n  return (\n    <SuscribeContext.Provider value={value}>\n      {children}\n    </SuscribeContext.Provider>\n  );\n};\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}