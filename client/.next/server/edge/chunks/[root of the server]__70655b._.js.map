{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { jwtVerify } from \"jose\";\r\n\r\nconst secret = new TextEncoder().encode(process.env.JWT_SECRET!);\r\n\r\nexport async function middleware(req: NextRequest) {\r\n  const url = req.nextUrl.clone();\r\n  const token = req.cookies.get(\"token\")?.value;\r\n\r\n  console.log(\"Token recibido:\", token);\r\n\r\n  const protectedRoutes = [\"/administracion\", \"/user\"];\r\n\r\n  // Verificar si la ruta solicitada está protegida\r\n  if (protectedRoutes.some((route) => url.pathname.startsWith(route))) {\r\n    if (!token) {\r\n      url.pathname = \"/signin\";\r\n      return NextResponse.redirect(url);\r\n    }\r\n\r\n    try {\r\n      const { payload } = await jwtVerify(token, secret);\r\n\r\n      // Verificar si el usuario tiene permisos de admin\r\n      if (!payload.isAdmin) {\r\n        url.pathname = \"/unauthorized\";\r\n        return NextResponse.redirect(url);\r\n      }\r\n    } catch (error) {\r\n      url.pathname = \"/signin\";\r\n      return NextResponse.redirect(url);\r\n    }\r\n  }\r\n\r\n  // Permitir la continuación de la solicitud si todo está bien\r\n  return NextResponse.next();\r\n}\r\n\r\n// Aplicar middleware solo en ciertas rutas\r\nexport const config = {\r\n  matcher: [\"/administracion/:path*\", \"/user/:path*\"],\r\n};\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AADA;;;AAGA,MAAM,SAAS,IAAI,cAAc,MAAM,CAAC,QAAQ,GAAG,CAAC,UAAU;AAEvD,eAAe,WAAW,GAAgB;IAC/C,MAAM,MAAM,IAAI,OAAO,CAAC,KAAK;IAC7B,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU;IAExC,QAAQ,GAAG,CAAC,mBAAmB;IAE/B,MAAM,kBAAkB;QAAC;QAAmB;KAAQ;IAEpD,iDAAiD;IACjD,IAAI,gBAAgB,IAAI,CAAC,CAAC,QAAU,IAAI,QAAQ,CAAC,UAAU,CAAC,SAAS;QACnE,IAAI,CAAC,OAAO;YACV,IAAI,QAAQ,GAAG;YACf,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;QAC/B;QAEA,IAAI;YACF,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,wJAAA,CAAA,YAAS,AAAD,EAAE,OAAO;YAE3C,kDAAkD;YAClD,IAAI,CAAC,QAAQ,OAAO,EAAE;gBACpB,IAAI,QAAQ,GAAG;gBACf,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;YAC/B;QACF,EAAE,OAAO,OAAO;YACd,IAAI,QAAQ,GAAG;YACf,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;QAC/B;IACF;IAEA,6DAA6D;IAC7D,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;QAAC;QAA0B;KAAe;AACrD"}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}