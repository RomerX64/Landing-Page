{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { jwtVerify } from \"jose\";\n\nconst secret = new TextEncoder().encode(process.env.JWT_SECRET!);\n\nexport async function middleware(req: NextRequest) {\n  const url = req.nextUrl.clone();\n  const token = req.cookies.get(\"token\")?.value;\n\n  console.log(\"Token recibido:\", token);\n\n  const protectedRoutes = [\"/administracion\", \"/user\"];\n\n  // Verificar si la ruta solicitada está protegida\n  if (protectedRoutes.some((route) => url.pathname.startsWith(route))) {\n    if (!token) {\n      url.pathname = \"/signin\";\n      return NextResponse.redirect(url);\n    }\n\n    try {\n      const { payload } = await jwtVerify(token, secret);\n\n      // Verificar si el usuario tiene permisos de admin\n      if (!payload.isAdmin) {\n        url.pathname = \"/unauthorized\";\n        return NextResponse.redirect(url);\n      }\n    } catch (error) {\n      url.pathname = \"/signin\";\n      return NextResponse.redirect(url);\n    }\n  }\n\n  // Permitir la continuación de la solicitud si todo está bien\n  return NextResponse.next();\n}\n\n// Aplicar middleware solo en ciertas rutas\nexport const config = {\n  matcher: [\"/administracion/:path*\", \"/user/:path*\"],\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AADA;;;AAGA,MAAM,SAAS,IAAI,cAAc,MAAM,CAAC,QAAQ,GAAG,CAAC,UAAU;AAEvD,eAAe,WAAW,GAAgB;IAC/C,MAAM,MAAM,IAAI,OAAO,CAAC,KAAK;IAC7B,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU;IAExC,QAAQ,GAAG,CAAC,mBAAmB;IAE/B,MAAM,kBAAkB;QAAC;QAAmB;KAAQ;IAEpD,iDAAiD;IACjD,IAAI,gBAAgB,IAAI,CAAC,CAAC,QAAU,IAAI,QAAQ,CAAC,UAAU,CAAC,SAAS;QACnE,IAAI,CAAC,OAAO;YACV,IAAI,QAAQ,GAAG;YACf,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;QAC/B;QAEA,IAAI;YACF,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,wJAAA,CAAA,YAAS,AAAD,EAAE,OAAO;YAE3C,kDAAkD;YAClD,IAAI,CAAC,QAAQ,OAAO,EAAE;gBACpB,IAAI,QAAQ,GAAG;gBACf,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;YAC/B;QACF,EAAE,OAAO,OAAO;YACd,IAAI,QAAQ,GAAG;YACf,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;QAC/B;IACF;IAEA,6DAA6D;IAC7D,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;QAAC;QAA0B;KAAe;AACrD"}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}