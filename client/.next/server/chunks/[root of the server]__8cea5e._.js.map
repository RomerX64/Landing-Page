{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/tomir/OneDrive/Desktop/AssetlyLandingPage/client/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport GoogleProvider from \"next-auth/providers/google\";\r\nimport { NextAuthOptions } from \"next-auth\";\r\nimport axios from \"axios\"; // Necesitarás Axios o cualquier otra librería para realizar la solicitud HTTP\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n    }),\r\n  ],\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n  callbacks: {\r\n    async session({ session, token }) {\r\n      if (!session.user) throw new Error(\"No user session found\");\r\n\r\n      const email = session.user.email!;\r\n      const name = session.user.name!;\r\n\r\n      try {\r\n        // Realizar la solicitud a la API para registrar al usuario\r\n        const response = await axios.post(\r\n          `${process.env.NEXTAUTH_URL}/api/auth/register`,\r\n          {\r\n            email,\r\n            name,\r\n          }\r\n        );\r\n\r\n        const userData = response.data.user;\r\n\r\n        if (!userData)\r\n          throw new Error(\"Error en el registro o recuperación del usuario\");\r\n\r\n        session.user.id = userData.id;\r\n\r\n        // Guardar en localStorage solo en el navegador\r\n        if (typeof window !== \"undefined\") {\r\n          localStorage.setItem(\"user\", JSON.stringify(session.user));\r\n        }\r\n\r\n        return session;\r\n      } catch (error) {\r\n        console.error(\"Error al registrar el usuario:\", error);\r\n        throw new Error(\"Error al registrar el usuario\");\r\n      }\r\n    },\r\n    async redirect({ url, baseUrl }) {\r\n      return `${process.env.NEXT_PUBLIC_API_URL}/`;\r\n    },\r\n  },\r\n};\r\n\r\nconst handler = NextAuth(authOptions);\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;AAEA,0OAA2B,8EAA8E;;;;AAElG,MAAM,cAA+B;IAC1C,WAAW;QACT,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;KACD;IACD,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,WAAW;QACT,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,CAAC,QAAQ,IAAI,EAAE,MAAM,IAAI,MAAM;YAEnC,MAAM,QAAQ,QAAQ,IAAI,CAAC,KAAK;YAChC,MAAM,OAAO,QAAQ,IAAI,CAAC,IAAI;YAE9B,IAAI;gBACF,2DAA2D;gBAC3D,MAAM,WAAW,MAAM,uIAAA,CAAA,UAAK,CAAC,IAAI,CAC/B,GAAG,QAAQ,GAAG,CAAC,YAAY,CAAC,kBAAkB,CAAC,EAC/C;oBACE;oBACA;gBACF;gBAGF,MAAM,WAAW,SAAS,IAAI,CAAC,IAAI;gBAEnC,IAAI,CAAC,UACH,MAAM,IAAI,MAAM;gBAElB,QAAQ,IAAI,CAAC,EAAE,GAAG,SAAS,EAAE;gBAE7B,+CAA+C;gBAC/C,uCAAmC;;gBAEnC;gBAEA,OAAO;YACT,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,kCAAkC;gBAChD,MAAM,IAAI,MAAM;YAClB;QACF;QACA,MAAM,UAAS,EAAE,GAAG,EAAE,OAAO,EAAE;YAC7B,OAAO,2DAAmC,CAAC,CAAC;QAC9C;IACF;AACF;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE"}},
    {"offset": {"line": 209, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}